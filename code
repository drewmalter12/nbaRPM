# Our goal is to use the RPM stat for NBA players during the 2015-16 season, 
# and find out which positions tend to have the highest RPM's.  Additionally, 
# if a guard and a big man have identical RPM's, is one of them 'more valuable'
# than the other?  

#Upload RPM's for pg's
basketball_pg <- read.csv("~/Documents/sports/basketball_pg.csv")
mean(basketball_pg$RPM)
#offensive efficiency
mean(basketball_pg$ORPM)
#defensive efficiency
mean(basketball_pg$DRPM)

#sg
basketball_sg <- read.csv("~/Documents/sports/basketball_sg.csv")
mean(basketball_sg$RPM)
mean(basketball_sg$ORPM)
mean(basketball_sg$DRPM)

#sf
basketball_sf <- read.csv("~/Documents/sports/basketball_sf.csv")
mean(basketball_sf$RPM)
mean(basketball_sf$ORPM)
mean(basketball_sf$DRPM)

#pf
basketball_pf <- read.csv("~/Documents/sports/basketball_pf.csv")
mean(basketball_pf$RPM)
mean(basketball_pf$ORPM)
mean(basketball_pf$DRPM)
#distribution of RPM's for pf's

#c
basketball_c <- read.csv("~/Documents/sports/basketball_c.csv")
mean(basketball_c$RPM)
mean(basketball_c$ORPM)
mean(basketball_c$DRPM)
#distribution of RPM's for c's
hist(basketball_c$RPM, main = 'RPM Centers 2015-16', xlab = 'RPM',
     xlim = c(-10,10))


# compare offensive efficiency position by position
o.positions <- c(mean(basketball_pg$ORPM), mean(basketball_sg$ORPM), 
                 mean(basketball_sf$ORPM), mean(basketball_pf$ORPM), 
                 mean(basketball_c$ORPM))

barplot(o.positions, xlab = 'Positions', ylab = 'Offensive Efficiency'
        , main = "Offense RPM 2015-2016", 
        names.arg = 'pg, sg, sf, pf, c', ylim = c(-1.5, 0.5))
# We see that point point guards are on average the most offensivly efficient
# while centers are the least

# compare defensive efficiency position by position
d.positions <- c(mean(basketball_pg$DRPM), mean(basketball_sg$DRPM), 
                 mean(basketball_sf$DRPM), mean(basketball_pf$DRPM), 
                 mean(basketball_c$DRPM))

barplot(d.positions, xlab = 'Positions', ylab = 'Defensive Efficiency'
        , main = "Defense RPM 2015-2016", 
        names.arg = 'pg, sg, sf, pf, c', ylim = c(-1.5, 1.5))
# We see that Centers are the most defensively efficient while point guards
# are the least

# compare total efficiency position by position
t.positions <- c(mean(basketball_pg$RPM), mean(basketball_sg$RPM), 
                 mean(basketball_sf$RPM), mean(basketball_pf$RPM), 
                 mean(basketball_c$RPM))

barplot(t.positions, xlab = 'Positions', ylab = 'Efficiency'
        , main = "RPM 2015-2016", 
        names.arg = 'pg, sg, sf, pf, c', ylim = c(-1, 0.5))

# Overall, Centers are on average the most efficient position while guards
# are most inneficient

# As the bar plots suggests, along with the different histograms, different
# positions (types of players) have different standards for efficiency
# We will now adjust each players RPM so that the average for each position
# is the same, which will also give each histogram the same mean






# Look at the distributions of RPM by position

#distribution of RPM's for pg's
hist(basketball_pg$RPM, main = 'RPM Point Guards 2015-16', xlab = 'RPM',
     xlim = c(-10,10))
sd(basketball_pg$RPM)

#distribution of RPM's for sg's
hist(basketball_sg$RPM, main = 'RPM Shooting Guards 2015-16', xlab = 'RPM',
     xlim = c(-10,10))
sd(basketball_sg$RPM)

#distribution of RPM's for sf's
hist(basketball_sf$RPM, main = 'RPM Small Forwards 2015-16', xlab = 'RPM',
     xlim = c(-10,10))
sd(basketball_sf$RPM)

#distribution of RPM's for pf's
hist(basketball_pf$RPM, main = 'RPM Power Forwards 2015-16', xlab = 'RPM',
     xlim = c(-10,10))
sd(basketball_pf$RPM)

#distribution of RPM's for c's
hist(basketball_c$RPM, main = 'RPM Centers 2015-16', xlab = 'RPM',
     xlim = c(-10,10))
sd(basketball_c$RPM)

# Order of width of distributions from widest to narrowest are
# pg, sf, pf, sg, c





#Adjust each RPM so that the mean of every position's RPM equals zero

basketball_pg$adj.RPM. <- basketball_pg$RPM - mean(basketball_pg$RPM)
basketball_sg$adj.RPM. <- basketball_sg$RPM - mean(basketball_sg$RPM)
basketball_sf$adj.RPM. <- basketball_sf$RPM - mean(basketball_sf$RPM)
basketball_pf$adj.RPM. <- basketball_pf$RPM - mean(basketball_pf$RPM)
basketball_c$adj.RPM. <- basketball_c$RPM - mean(basketball_c$RPM)

#Adding to each RPM will not change the sd, so now we need to create a 
# multiplier for each RPM based on the sd of each position. 
# We want PG's to get the largest multiplier and C's to get the smallest.
# To do this, we will take the recriprical of the mean of the SD's
# of the rest of the positions excluding the position of interst
# and multiply by 3 so that the new SD's are close to the original SD's

# Finding the standard deviation of the rest of the RPM's 
# minus specific position to use as a multiplier

sd_pg <- mean(c(sd(basketball_sg$RPM), sd(basketball_sf$RPM),
                sd(basketball_pf$RPM), sd(basketball_c$RPM)))
sd_sg <- mean(c(sd(basketball_pg$RPM), sd(basketball_sf$RPM),
                sd(basketball_pf$RPM), sd(basketball_c$RPM)))
sd_sf <- mean(c(sd(basketball_sg$RPM), sd(basketball_pg$RPM),
                sd(basketball_pf$RPM), sd(basketball_c$RPM)))
sd_pf <- mean(c(sd(basketball_sg$RPM), sd(basketball_sf$RPM),
                sd(basketball_pg$RPM), sd(basketball_c$RPM)))
sd_c <- mean(c(sd(basketball_sg$RPM), sd(basketball_sf$RPM),
               sd(basketball_pf$RPM), sd(basketball_pg$RPM)))


basketball_pg$adj.RPM <- basketball_pg$adj.RPM. * (3/sd_pg)
basketball_sg$adj.RPM <- basketball_sg$adj.RPM. * (3/sd_sg)
basketball_sf$adj.RPM <- basketball_sf$adj.RPM. * (3/sd_sf)
basketball_pf$adj.RPM <- basketball_pf$adj.RPM. * (3/sd_pf)
basketball_c$adj.RPM <- basketball_c$adj.RPM. * (3/sd_c)




# We will now combine each position into one dataset and compare 
# players adjusted RPM's against each other

all.players <- rbind(basketball_pg, basketball_sg, basketball_sf
                     , basketball_pf, basketball_c)
all.players <- all.players[order(all.players$adj.RPM, decreasing = TRUE),c(1:10)]
head(all.players, n = 6)

head(all.players[,c(2,3,8,10)], n = 25)
head(all.players[,c(2,3,8,10)], n = 100)
